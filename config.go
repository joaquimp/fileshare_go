package main

import (
	"log"
	"os"
	"strconv"
)

// Config armazena as configura√ß√µes da aplica√ß√£o
type Config struct {
	Port        string // Porta do servidor
	BaseURL     string // URL base para gera√ß√£o de links
	StoragePath string // Diret√≥rio de armazenamento
	MaxFileSize int64  // Tamanho m√°ximo de arquivo em bytes
	APIKey      string // Chave de API para autentica√ß√£o
	UserAgent   string // User-Agent permitido (opcional)
}

// LoadConfig carrega as configura√ß√µes das vari√°veis de ambiente com valores padr√£o
func LoadConfig() *Config {
	config := &Config{
		Port:        getEnv("PORT", "8080"),
		BaseURL:     getEnv("BASE_URL", "http://localhost:8080"),
		StoragePath: getEnv("STORAGE_PATH", "./uploads"),
		MaxFileSize: getEnvAsInt64("MAX_FILE_SIZE_MB", 5) * 1024 * 1024, // Converte MB para bytes
		APIKey:      getEnv("API_KEY", ""),
		UserAgent:   getEnv("ALLOWED_USER_AGENT", ""),
	}

	// Log das configura√ß√µes carregadas
	log.Printf("ÔøΩ Servidor inicializado:")
	log.Printf("   üì° Porta: %s", config.Port)
	log.Printf("   üìè Limite de arquivo: %.1f MB", float64(config.MaxFileSize)/(1024*1024))
	log.Printf("   üîê Autentica√ß√£o: %s", func() string {
		if config.APIKey != "" {
			return "Habilitada"
		}
		return "‚ùå Desabilitada"
	}())
	if config.UserAgent != "" {
		log.Printf("   üì± User-Agent: %s", config.UserAgent)
	}

	return config
}

// getEnv obt√©m uma vari√°vel de ambiente ou retorna um valor padr√£o
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

// getEnvAsInt64 obt√©m uma vari√°vel de ambiente como int64 ou retorna um valor padr√£o
func getEnvAsInt64(key string, defaultValue int64) int64 {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.ParseInt(value, 10, 64); err == nil {
			return intValue
		}
		log.Printf("‚ö†Ô∏è  Valor inv√°lido para %s: %s. Usando valor padr√£o: %d", key, value, defaultValue)
	}
	return defaultValue
}

// maskAPIKey mascara a API key para logs de seguran√ßa
func maskAPIKey(apiKey string) string {
	if apiKey == "" {
		return "‚ùå N√ÉO CONFIGURADA"
	}
	if len(apiKey) <= 8 {
		return "****"
	}
	return apiKey[:4] + "****" + apiKey[len(apiKey)-4:]
}
